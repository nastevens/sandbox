package com.qiggroup.javappp.test;

import static org.junit.Assert.*;

import org.junit.*;

import com.qiggroup.javappp.frame.Frame;

public class FrameTest {

    private int[] validFrame_noACFC_16bit = { 0xff, 0x7d, 0x23, 0xc0, 0x21,
            0x7d, 0x21, 0x7d, 0x21, 0x7d, 0x20, 0x7d, 0x34, 0x7d, 0x22, 0x7d,
            0x26, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x25,
            0x7d, 0x26, 0x81, 0xa8, 0x32, 0x32, 0x7d, 0x27, 0x7d, 0x22, 0x7d,
            0x28, 0x7d, 0x22, 0xdf, 0x6d };

    private int[] invalidFrame_noACFC_16bit = { 0xff, 0x7d, 0x23, 0xc0, 0x20,
            0x7d, 0x21, 0x7d, 0x21, 0x7d, 0x20, 0x7d, 0x34, 0x7d, 0x22, 0x7d,
            0x26, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x25,
            0x7d, 0x26, 0x81, 0xa8, 0x32, 0x32, 0x7d, 0x27, 0x7d, 0x22, 0x7d,
            0x28, 0x7d, 0x22, 0xdf, 0x6d };

    private int[] validFrame_ACFC_16bit = { 0xc0, 0x21, 0x7d, 0x21, 0x7d, 0x21,
            0x7d, 0x20, 0x7d, 0x34, 0x7d, 0x22, 0x7d, 0x26, 0x7d, 0x20, 0x7d,
            0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x25, 0x7d, 0x26, 0x81, 0xa8,
            0x32, 0x32, 0x7d, 0x27, 0x7d, 0x22, 0x7d, 0x28, 0x7d, 0x22, 0xdf,
            0x6d };

    private int[] invalidFrame_ACFC_16bit = { 0xc0, 0x20, 0x7d, 0x21, 0x7d,
            0x21, 0x7d, 0x20, 0x7d, 0x34, 0x7d, 0x22, 0x7d, 0x26, 0x7d, 0x20,
            0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x25, 0x7d, 0x26, 0x81,
            0xa8, 0x32, 0x32, 0x7d, 0x27, 0x7d, 0x22, 0x7d, 0x28, 0x7d, 0x22,
            0xdf, 0x6d };

    private int[] setupFrameFull = { 0x7e, 0xff, 0x7d, 0x23, 0xc0, 0x21, 0x7d,
            0x21, 0x7d, 0x21, 0x7d, 0x20, 0x7d, 0x34, 0x7d, 0x22, 0x7d, 0x26,
            0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x25, 0x7d,
            0x26, 0x81, 0xa8, 0x32, 0x32, 0x7d, 0x27, 0x7d, 0x22, 0x7d, 0x28,
            0x7d, 0x22, 0xdf, 0x6d, 0x7e };

    @Test
    public void testIsValid() {
        Frame testFrame;
        testFrame = new Frame();
        testFrame.addPayload(this.validFrame_noACFC_16bit);
        assertTrue(testFrame.isValid());

        testFrame = new Frame();
        testFrame.addPayload(this.invalidFrame_noACFC_16bit);
        assertFalse(testFrame.isValid());

        // testFrame = new Frame(1500, true, 2);
        // testFrame.addPayload(this.validFrame_ACFC_16bit);
        // assertTrue(testFrame.isValid());
        //
        // testFrame = new Frame(1500, true, 2);
        // testFrame.addPayload(this.invalidFrame_ACFC_16bit);
        // assertFalse(testFrame.isValid());
    }

}
