use openssl::{
    hash::MessageDigest,
    pkey::PKey,
    rsa::Padding,
    sign::{RsaPssSaltlen, Verifier},
};

const PACKET: &str = "0e007c9d66aa4d71e4e
const SIGNATURE: &str = "148ca231afe89a886b0d223623c59ba98142dca2345712dddc2cc8ec46b9f997ae914ba3280246e91546aff2e6d1dffeee49fc22ec8ebcd149eb381bd1100cc806e5b263b781857329d5d1321434f3c16c67abf99a9ec494aaa41f5310d4b97883edaa189915cbca4296f84e070b73511edf403b0c8aa538e97ab8254c50f30e0248bcadbdef5399974fc0e71c6742b7c4749967a46f40610ca8764732253ed0d05aa6f8ff6596f1249c13d9349fbf5d4bcfaa9836be9aa87dce48739df7f4464ebfbd357617d2325d3dbca16bd27982aa389149f8db8354375b50b82490b369fc4256038945b1988cf109a1054dd652b713d7a6e92fca3df77be58307668025";
const PUBKEY: &str = r#"-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuCDrDW1MrrzrIxW3tmiF
ocGr14OC5UtyLDCtZbDdX1JOAfeV5jlVvGzSgUnEn4Gol65EglwDUjCcuiNDvVWh
xOGSVhEoIoG6jgcmVvXsX30B9rmwRx41r5NFYkVY2Bc3XxkGfMbURq4NwW5vZMV0
fWhVOiexgPs0JNKqKfV4SUVkmvPaYsO2DeTjuLOtGypcmYm2UD8OWxY9/395476y
LImHEIY7vlnCSUWkJ0AG72OG8gVR1XVCzErTGowC9mh3jArwhls/EuZ48k5uSRwp
6iUK5qTKceQ9xgtuFTopiTr//EmeBtXaCY4DP8Pc+sLiYsTNZpax1kfU17k8z5Sc
mQIDAQAB
-----END PUBLIC KEY-----"#;

fn main() {
    let pem = PKey::public_key_from_pem(PUBKEY.as_bytes()).unwrap();
    let payload = hex::decode(PACKET).unwrap();
    let mut verifier = Verifier::new(MessageDigest::sha512(), &pem).unwrap();
    verifier.set_rsa_padding(Padding::PKCS1_PSS).unwrap();
    verifier.set_rsa_pss_saltlen(RsaPssSaltlen::DIGEST_LENGTH).unwrap();
    verifier.update(&payload).unwrap();
    if let Ok(true) = verifier.verify(&hex::decode(SIGNATURE).unwrap()) {
        println!("Verified");
    } else {
        println!("Not verified");
    }
}
